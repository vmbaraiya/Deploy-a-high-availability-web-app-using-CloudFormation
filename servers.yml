Description: >
    Vikrant Baraiya / Cloud_DevOps_Engineer
    This template deploys Load balancer, EC2 instance using Autoscaling , 
    2 of them in private subnet of each AZ, with the security group.
    Create Stack using the below aws cli command to avoid issue with InsufficientCapabilitiesException 
    $ aws cloudformation create-stack --stack-name webappserverstack \
    --template-body file://servers.yml \
    --parameters file://server-parameters.json --capabilities CAPABILITY_IAM

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource Name  
        Type: String  

    InstanceType:
      Description: The instance type to use for the EC2 instance
      Type: String
    
    BastionInstanceType:
      Description: The instance type to use for the EC2 instance
      Type: String
    AmazonImage:
      Description: The image type to use for the EC2 instance
      Type: String

    KeyName:
      Description: Name of an existing EC2 key pair for SSH access to the EC2 instance.
      Type: AWS::EC2::KeyPair::KeyName
    
    

Resources:
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name 
          Value: !Sub ${EnvironmentName} LBSecgroup

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our host and SSH from local host only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name 
          Value: !Sub ${EnvironmentName} WebServerSecgroup
  
  BastionServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our host and SSH from local host only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name 
          Value: !Sub ${EnvironmentName} BastionServerSecgroup

  BastionWebApplaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AmazonImage
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref ProfileWithRolesForWebApp
      SecurityGroups:
        - Ref: BastionServerSecGroup
      InstanceType: !Ref BastionInstanceType
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'

  BastionAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue:
          !Sub "${EnvironmentName}-PUB-NETS"
      LaunchConfigurationName:
        Ref: BastionWebApplaunchConfig
      MinSize: '2'
      MaxSize: '2'




  ProfileWithRolesForWebApp:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - WebAppS3ReadOnlyEC2
  
  WebApplaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: | 
          #!/bin/bash
          sudo yum update -y
          sudo yum install -y httpd
          sudo systemctl start httpd
          cd /var/www/html
          sudo aws s3 cp s3://cloudformationwebapp/index.html .
      ImageId: !Ref AmazonImage
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref ProfileWithRolesForWebApp
      SecurityGroups:
        - Ref: WebServerSecGroup
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue:
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebApplaunchConfig
      MinSize: '2'
      MaxSize: '2'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup

  WebAppLB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup

  Listener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions: #required
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn: #required
        Ref: WebAppLB
      Port: '80' #required
      Protocol: HTTP #required

  ALBListenerRule:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Actions: #required
      - Type: forward
        TargetGroupArn: !Ref 'WebAppTargetGroup'
      Conditions: #required
      - Field: path-pattern
        Values: [/index.html]
      ListenerArn: !Ref 'Listener' #required
      Priority: 1 #required

  WebAppTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

Outputs:
  LoadBalancerDNSName:
    Description: The DNSName of the backup load balancer
    Value: !Join [ "//", [ 'http:', !GetAtt WebAppLB.DNSName ]] 
    Export:
      Name: !Sub ${EnvironmentName}-LB